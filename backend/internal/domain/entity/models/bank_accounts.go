// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BankAccount is an object representing the database table.
type BankAccount struct {
	ID        int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClientID  int64  `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	BankName  string `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`
	Branch    string `boil:"branch" json:"branch" toml:"branch" yaml:"branch"`
	AccountNo string `boil:"account_no" json:"account_no" toml:"account_no" yaml:"account_no"`
	Holder    string `boil:"holder" json:"holder" toml:"holder" yaml:"holder"`

	R *bankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankAccountColumns = struct {
	ID        string
	ClientID  string
	BankName  string
	Branch    string
	AccountNo string
	Holder    string
}{
	ID:        "id",
	ClientID:  "client_id",
	BankName:  "bank_name",
	Branch:    "branch",
	AccountNo: "account_no",
	Holder:    "holder",
}

var BankAccountTableColumns = struct {
	ID        string
	ClientID  string
	BankName  string
	Branch    string
	AccountNo string
	Holder    string
}{
	ID:        "bank_accounts.id",
	ClientID:  "bank_accounts.client_id",
	BankName:  "bank_accounts.bank_name",
	Branch:    "bank_accounts.branch",
	AccountNo: "bank_accounts.account_no",
	Holder:    "bank_accounts.holder",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BankAccountWhere = struct {
	ID        whereHelperint64
	ClientID  whereHelperint64
	BankName  whereHelperstring
	Branch    whereHelperstring
	AccountNo whereHelperstring
	Holder    whereHelperstring
}{
	ID:        whereHelperint64{field: "`bank_accounts`.`id`"},
	ClientID:  whereHelperint64{field: "`bank_accounts`.`client_id`"},
	BankName:  whereHelperstring{field: "`bank_accounts`.`bank_name`"},
	Branch:    whereHelperstring{field: "`bank_accounts`.`branch`"},
	AccountNo: whereHelperstring{field: "`bank_accounts`.`account_no`"},
	Holder:    whereHelperstring{field: "`bank_accounts`.`holder`"},
}

// BankAccountRels is where relationship names are stored.
var BankAccountRels = struct {
	Client string
}{
	Client: "Client",
}

// bankAccountR is where relationships are stored.
type bankAccountR struct {
	Client *Client `boil:"Client" json:"Client" toml:"Client" yaml:"Client"`
}

// NewStruct creates a new relationship struct
func (*bankAccountR) NewStruct() *bankAccountR {
	return &bankAccountR{}
}

func (r *bankAccountR) GetClient() *Client {
	if r == nil {
		return nil
	}
	return r.Client
}

// bankAccountL is where Load methods for each relationship are stored.
type bankAccountL struct{}

var (
	bankAccountAllColumns            = []string{"id", "client_id", "bank_name", "branch", "account_no", "holder"}
	bankAccountColumnsWithoutDefault = []string{"client_id", "bank_name", "branch", "account_no", "holder"}
	bankAccountColumnsWithDefault    = []string{"id"}
	bankAccountPrimaryKeyColumns     = []string{"id"}
	bankAccountGeneratedColumns      = []string{}
)

type (
	// BankAccountSlice is an alias for a slice of pointers to BankAccount.
	// This should almost always be used instead of []BankAccount.
	BankAccountSlice []*BankAccount
	// BankAccountHook is the signature for custom BankAccount hook methods
	BankAccountHook func(context.Context, boil.ContextExecutor, *BankAccount) error

	bankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankAccountType                 = reflect.TypeOf(&BankAccount{})
	bankAccountMapping              = queries.MakeStructMapping(bankAccountType)
	bankAccountPrimaryKeyMapping, _ = queries.BindMapping(bankAccountType, bankAccountMapping, bankAccountPrimaryKeyColumns)
	bankAccountInsertCacheMut       sync.RWMutex
	bankAccountInsertCache          = make(map[string]insertCache)
	bankAccountUpdateCacheMut       sync.RWMutex
	bankAccountUpdateCache          = make(map[string]updateCache)
	bankAccountUpsertCacheMut       sync.RWMutex
	bankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bankAccountAfterSelectMu sync.Mutex
var bankAccountAfterSelectHooks []BankAccountHook

var bankAccountBeforeInsertMu sync.Mutex
var bankAccountBeforeInsertHooks []BankAccountHook
var bankAccountAfterInsertMu sync.Mutex
var bankAccountAfterInsertHooks []BankAccountHook

var bankAccountBeforeUpdateMu sync.Mutex
var bankAccountBeforeUpdateHooks []BankAccountHook
var bankAccountAfterUpdateMu sync.Mutex
var bankAccountAfterUpdateHooks []BankAccountHook

var bankAccountBeforeDeleteMu sync.Mutex
var bankAccountBeforeDeleteHooks []BankAccountHook
var bankAccountAfterDeleteMu sync.Mutex
var bankAccountAfterDeleteHooks []BankAccountHook

var bankAccountBeforeUpsertMu sync.Mutex
var bankAccountBeforeUpsertHooks []BankAccountHook
var bankAccountAfterUpsertMu sync.Mutex
var bankAccountAfterUpsertHooks []BankAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BankAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BankAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BankAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BankAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BankAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BankAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BankAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BankAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BankAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankAccountHook registers your hook function for all future operations.
func AddBankAccountHook(hookPoint boil.HookPoint, bankAccountHook BankAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bankAccountAfterSelectMu.Lock()
		bankAccountAfterSelectHooks = append(bankAccountAfterSelectHooks, bankAccountHook)
		bankAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bankAccountBeforeInsertMu.Lock()
		bankAccountBeforeInsertHooks = append(bankAccountBeforeInsertHooks, bankAccountHook)
		bankAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bankAccountAfterInsertMu.Lock()
		bankAccountAfterInsertHooks = append(bankAccountAfterInsertHooks, bankAccountHook)
		bankAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bankAccountBeforeUpdateMu.Lock()
		bankAccountBeforeUpdateHooks = append(bankAccountBeforeUpdateHooks, bankAccountHook)
		bankAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bankAccountAfterUpdateMu.Lock()
		bankAccountAfterUpdateHooks = append(bankAccountAfterUpdateHooks, bankAccountHook)
		bankAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bankAccountBeforeDeleteMu.Lock()
		bankAccountBeforeDeleteHooks = append(bankAccountBeforeDeleteHooks, bankAccountHook)
		bankAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bankAccountAfterDeleteMu.Lock()
		bankAccountAfterDeleteHooks = append(bankAccountAfterDeleteHooks, bankAccountHook)
		bankAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bankAccountBeforeUpsertMu.Lock()
		bankAccountBeforeUpsertHooks = append(bankAccountBeforeUpsertHooks, bankAccountHook)
		bankAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bankAccountAfterUpsertMu.Lock()
		bankAccountAfterUpsertHooks = append(bankAccountAfterUpsertHooks, bankAccountHook)
		bankAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single bankAccount record from the query.
func (q bankAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankAccount, error) {
	o := &BankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bank_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BankAccount records from the query.
func (q bankAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankAccountSlice, error) {
	var o []*BankAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BankAccount slice")
	}

	if len(bankAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BankAccount records in the query.
func (q bankAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bank_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bank_accounts exists")
	}

	return count > 0, nil
}

// Client pointed to by the foreign key.
func (o *BankAccount) Client(mods ...qm.QueryMod) clientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ClientID),
	}

	queryMods = append(queryMods, mods...)

	return Clients(queryMods...)
}

// LoadClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bankAccountL) LoadClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankAccount interface{}, mods queries.Applicator) error {
	var slice []*BankAccount
	var object *BankAccount

	if singular {
		var ok bool
		object, ok = maybeBankAccount.(*BankAccount)
		if !ok {
			object = new(BankAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBankAccount))
			}
		}
	} else {
		s, ok := maybeBankAccount.(*[]*BankAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBankAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bankAccountR{}
		}
		args[object.ClientID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankAccountR{}
			}

			args[obj.ClientID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clients`),
		qm.WhereIn(`clients.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Client")
	}

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Client")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for clients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clients")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Client = foreign
		if foreign.R == nil {
			foreign.R = &clientR{}
		}
		foreign.R.BankAccounts = append(foreign.R.BankAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClientID == foreign.ID {
				local.R.Client = foreign
				if foreign.R == nil {
					foreign.R = &clientR{}
				}
				foreign.R.BankAccounts = append(foreign.R.BankAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetClient of the bankAccount to the related item.
// Sets o.R.Client to related.
// Adds o to related.R.BankAccounts.
func (o *BankAccount) SetClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Client) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bank_accounts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"client_id"}),
		strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClientID = related.ID
	if o.R == nil {
		o.R = &bankAccountR{
			Client: related,
		}
	} else {
		o.R.Client = related
	}

	if related.R == nil {
		related.R = &clientR{
			BankAccounts: BankAccountSlice{o},
		}
	} else {
		related.R.BankAccounts = append(related.R.BankAccounts, o)
	}

	return nil
}

// BankAccounts retrieves all the records using an executor.
func BankAccounts(mods ...qm.QueryMod) bankAccountQuery {
	mods = append(mods, qm.From("`bank_accounts`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`bank_accounts`.*"})
	}

	return bankAccountQuery{q}
}

// FindBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankAccount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BankAccount, error) {
	bankAccountObj := &BankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bank_accounts` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bank_accounts")
	}

	if err = bankAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bankAccountObj, err
	}

	return bankAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bank_accounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankAccountInsertCacheMut.RLock()
	cache, cached := bankAccountInsertCache[key]
	bankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bank_accounts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bank_accounts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bank_accounts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bank_accounts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankAccountMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bank_accounts")
	}

CacheNoHooks:
	if !cached {
		bankAccountInsertCacheMut.Lock()
		bankAccountInsertCache[key] = cache
		bankAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankAccountUpdateCacheMut.RLock()
	cache, cached := bankAccountUpdateCache[key]
	bankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bank_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bank_accounts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, append(wl, bankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bank_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bank_accounts")
	}

	if !cached {
		bankAccountUpdateCacheMut.Lock()
		bankAccountUpdateCache[key] = cache
		bankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bank_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bank_accounts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bankAccount")
	}
	return rowsAff, nil
}

var mySQLBankAccountUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BankAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bank_accounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBankAccountUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankAccountUpsertCacheMut.RLock()
	cache, cached := bankAccountUpsertCache[key]
	bankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bank_accounts, could not build update column list")
		}

		ret := strmangle.SetComplement(bankAccountAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`bank_accounts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bank_accounts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bank_accounts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankAccountMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bankAccountType, bankAccountMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for bank_accounts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bank_accounts")
	}

CacheNoHooks:
	if !cached {
		bankAccountUpsertCacheMut.Lock()
		bankAccountUpsertCache[key] = cache
		bankAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BankAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankAccountPrimaryKeyMapping)
	sql := "DELETE FROM `bank_accounts` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bank_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bankAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bank_accounts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_accounts")
	}

	if len(bankAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bank_accounts`.* FROM `bank_accounts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BankAccountSlice")
	}

	*o = slice

	return nil
}

// BankAccountExists checks if the BankAccount row exists.
func BankAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bank_accounts` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bank_accounts exists")
	}

	return exists, nil
}

// Exists checks if the BankAccount row exists.
func (o *BankAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BankAccountExists(ctx, exec, o.ID)
}
